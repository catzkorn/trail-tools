// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: web_authn.sql

package internal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWebAuthnUser = `-- name: CreateWebAuthnUser :one
insert into web_authn_users (name) values ($1) returning id, web_authn_user_id, name
`

func (q *Queries) CreateWebAuthnUser(ctx context.Context, name string) (*WebAuthnUser, error) {
	row := q.db.QueryRow(ctx, createWebAuthnUser, name)
	var i WebAuthnUser
	err := row.Scan(&i.ID, &i.WebAuthnUserID, &i.Name)
	return &i, err
}

const getWebAuthnUser = `-- name: GetWebAuthnUser :one
select id, web_authn_user_id, name from web_authn_users where id = $1
`

func (q *Queries) GetWebAuthnUser(ctx context.Context, id pgtype.UUID) (*WebAuthnUser, error) {
	row := q.db.QueryRow(ctx, getWebAuthnUser, id)
	var i WebAuthnUser
	err := row.Scan(&i.ID, &i.WebAuthnUserID, &i.Name)
	return &i, err
}

const getWebAuthnUserByWebAuthnUserID = `-- name: GetWebAuthnUserByWebAuthnUserID :one
select id, web_authn_user_id, name from web_authn_users where web_authn_user_id = $1
`

func (q *Queries) GetWebAuthnUserByWebAuthnUserID(ctx context.Context, webAuthnUserID []byte) (*WebAuthnUser, error) {
	row := q.db.QueryRow(ctx, getWebAuthnUserByWebAuthnUserID, webAuthnUserID)
	var i WebAuthnUser
	err := row.Scan(&i.ID, &i.WebAuthnUserID, &i.Name)
	return &i, err
}

const listWebAuthnCredentials = `-- name: ListWebAuthnCredentials :many
select web_authn_user_id, create_time, id, public_key, attestation_type, transport, flag_user_present, flag_user_verified, flag_backup_eligible, flag_backup_state, authenticator_aaguid, authenticator_sign_count, authenticator_clone_warning, authenticator_attachment, attestation_client_data_json, attestation_client_data_hash, attestation_authenticator_data, attestation_public_key_algorithm, attestation_object from web_authn_credentials where web_authn_user_id = $1
`

func (q *Queries) ListWebAuthnCredentials(ctx context.Context, webAuthnUserID []byte) ([]*WebAuthnCredential, error) {
	rows, err := q.db.Query(ctx, listWebAuthnCredentials, webAuthnUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WebAuthnCredential
	for rows.Next() {
		var i WebAuthnCredential
		if err := rows.Scan(
			&i.WebAuthnUserID,
			&i.CreateTime,
			&i.ID,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transport,
			&i.FlagUserPresent,
			&i.FlagUserVerified,
			&i.FlagBackupEligible,
			&i.FlagBackupState,
			&i.AuthenticatorAaguid,
			&i.AuthenticatorSignCount,
			&i.AuthenticatorCloneWarning,
			&i.AuthenticatorAttachment,
			&i.AttestationClientDataJSON,
			&i.AttestationClientDataHash,
			&i.AttestationAuthenticatorData,
			&i.AttestationPublicKeyAlgorithm,
			&i.AttestationObject,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertWebAuthnCredential = `-- name: UpsertWebAuthnCredential :one
insert into web_authn_credentials (
  web_authn_user_id,
  id,
  public_key,
  attestation_type,
  transport,
  flag_user_present,
  flag_user_verified,
  flag_backup_eligible,
  flag_backup_state,
  authenticator_aaguid,
  authenticator_sign_count,
  authenticator_clone_warning,
  authenticator_attachment,
  attestation_client_data_json,
  attestation_client_data_hash,
  attestation_authenticator_data,
  attestation_public_key_algorithm,
  attestation_object
) values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17,
  $18
) on conflict (id) do update set
  web_authn_user_id = excluded.web_authn_user_id,
  public_key = excluded.public_key,
  attestation_type = excluded.attestation_type,
  transport = excluded.transport,
  flag_user_present = excluded.flag_user_present,
  flag_user_verified = excluded.flag_user_verified,
  flag_backup_eligible = excluded.flag_backup_eligible,
  flag_backup_state = excluded.flag_backup_state,
  authenticator_aaguid = excluded.authenticator_aaguid,
  authenticator_sign_count = excluded.authenticator_sign_count,
  authenticator_clone_warning = excluded.authenticator_clone_warning,
  authenticator_attachment = excluded.authenticator_attachment,
  attestation_client_data_json = excluded.attestation_client_data_json,
  attestation_client_data_hash = excluded.attestation_client_data_hash,
  attestation_authenticator_data = excluded.attestation_authenticator_data,
  attestation_public_key_algorithm = excluded.attestation_public_key_algorithm,
  attestation_object = excluded.attestation_object
returning web_authn_user_id, create_time, id, public_key, attestation_type, transport, flag_user_present, flag_user_verified, flag_backup_eligible, flag_backup_state, authenticator_aaguid, authenticator_sign_count, authenticator_clone_warning, authenticator_attachment, attestation_client_data_json, attestation_client_data_hash, attestation_authenticator_data, attestation_public_key_algorithm, attestation_object
`

type UpsertWebAuthnCredentialParams struct {
	WebAuthnUserID                []byte
	ID                            []byte
	PublicKey                     []byte
	AttestationType               string
	Transport                     []WebAuthnAuthenticatorTransport
	FlagUserPresent               bool
	FlagUserVerified              bool
	FlagBackupEligible            bool
	FlagBackupState               bool
	AuthenticatorAaguid           []byte
	AuthenticatorSignCount        int64
	AuthenticatorCloneWarning     bool
	AuthenticatorAttachment       WebAuthnAuthenticatorAttachment
	AttestationClientDataJSON     []byte
	AttestationClientDataHash     []byte
	AttestationAuthenticatorData  []byte
	AttestationPublicKeyAlgorithm int64
	AttestationObject             []byte
}

func (q *Queries) UpsertWebAuthnCredential(ctx context.Context, arg *UpsertWebAuthnCredentialParams) (*WebAuthnCredential, error) {
	row := q.db.QueryRow(ctx, upsertWebAuthnCredential,
		arg.WebAuthnUserID,
		arg.ID,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transport,
		arg.FlagUserPresent,
		arg.FlagUserVerified,
		arg.FlagBackupEligible,
		arg.FlagBackupState,
		arg.AuthenticatorAaguid,
		arg.AuthenticatorSignCount,
		arg.AuthenticatorCloneWarning,
		arg.AuthenticatorAttachment,
		arg.AttestationClientDataJSON,
		arg.AttestationClientDataHash,
		arg.AttestationAuthenticatorData,
		arg.AttestationPublicKeyAlgorithm,
		arg.AttestationObject,
	)
	var i WebAuthnCredential
	err := row.Scan(
		&i.WebAuthnUserID,
		&i.CreateTime,
		&i.ID,
		&i.PublicKey,
		&i.AttestationType,
		&i.Transport,
		&i.FlagUserPresent,
		&i.FlagUserVerified,
		&i.FlagBackupEligible,
		&i.FlagBackupState,
		&i.AuthenticatorAaguid,
		&i.AuthenticatorSignCount,
		&i.AuthenticatorCloneWarning,
		&i.AuthenticatorAttachment,
		&i.AttestationClientDataJSON,
		&i.AttestationClientDataHash,
		&i.AttestationAuthenticatorData,
		&i.AttestationPublicKeyAlgorithm,
		&i.AttestationObject,
	)
	return &i, err
}
